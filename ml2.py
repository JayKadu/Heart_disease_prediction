# -*- coding: utf-8 -*-
"""ML2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/120HAkparc0X6zpXghFEaONK6brwqgQ__
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import os
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore", category=RuntimeWarning)

hd=pd.read_csv("/content/heart_disease.csv")

hd.info()

hd.describe(include='all')

hd['HeartDisease'].value_counts()

corr_matrix=hd.corr()
corr_matrix["HeartDisease"].sort_values(ascending=False).head(7)

hd.ChestPainType.unique()

plt.figure(1,figsize=(5,5))
hd['ChestPainType'].value_counts().plot.pie(autopct="%1.1f%%")
plt.show()

hd.head()

plt.figure(2,figsize=(5,5))
hd['RestingECG'].value_counts().plot.pie(autopct="%1.1f%%")
plt.show()

plt.figure(2,figsize=(5,5))
hd['Sex'].value_counts().plot.pie(autopct="%1.1f%%")
plt.show()

plt.figure(2,figsize=(5,5))
hd['HeartDisease'].value_counts().plot.pie(autopct="%1.1f%%")
plt.show()

plt.figure(2,figsize=(5,5))
hd['ST_Slope'].value_counts().plot.pie(autopct="%1.1f%%")
plt.show()

plt.figure(2,figsize=(5,5))
hd['RestingECG'].value_counts().plot.pie(autopct="%1.1f%%")
plt.show()

plt.figure(2,figsize=(5,5))
hd['FastingBS'].value_counts().plot.pie(autopct="%1.1f%%")
plt.show()

def diagnostic_plots(hd,variable,target):
  plt.figure(figsize=(18,4))
  plt.subplot(1,4,1)
  sns.histplot(hd[variable],bins=30,color="r")
  plt.title("Histogram")

  plt.subplot(1,4,2)
  plt.scatter(hd[variable],hd['HeartDisease'],color="b")
  plt.title("ScatterPlot")

  plt.subplot(1,4,3)
  sns.boxplot(y=hd[variable],color="g")
  plt.title("BoxPlot")

  plt.subplot(1,4,4)
  sns.barplot(x=target,y=variable,data=hd)
  plt.title("BarPlot")

  plt.show()

diagnostic_plots(hd,'Age',"HeartDisease")

diagnostic_plots(hd,'RestingBP',"HeartDisease")

diagnostic_plots(hd,'Cholesterol',"HeartDisease")

diagnostic_plots(hd,'FastingBS',"HeartDisease")

diagnostic_plots(hd,'MaxHR',"HeartDisease")

diagnostic_plots(hd,'Oldpeak',"HeartDisease")

corrmat = hd.corr()
corrmat

plt.figure(figsize=(16,5))
k=7
cols=corrmat.nlargest(k,'HeartDisease')['HeartDisease'].index
cm=np.corrcoef(hd[cols].values.T)
sns.set(font_scale=1.25)
hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, 
                 yticklabels=cols.values, xticklabels=cols.values,cmap="Blues")
plt.show()

heart_target=hd['HeartDisease']
heart_feature=hd.drop(['HeartDisease'],axis=1)
heart_target.shape,heart_feature.shape

heart_feature_ohe = pd.get_dummies(heart_feature, columns=['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope'])
heart_feature_ohe

from sklearn.model_selection import train_test_split 

X_train, X_test, y_train, y_test = train_test_split(heart_feature_ohe, heart_target, test_size=0.2, random_state=2134)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

train_cnt = y_train.count()
test_cnt = y_test.count()
print('train set Shape:{0}, test set Shape:{1}'.format(X_train.shape , X_test.shape))

print('train set HeartDisease value distribuion ratio')
print(y_train.value_counts()/train_cnt)
print('\n test set HeartDisease value distribuion ratio')
print(y_test.value_counts()/test_cnt)

from xgboost import XGBClassifier
from sklearn.metrics import roc_auc_score

xgb_clf = XGBClassifier(n_estimators=200, learning_rate=0.05, random_state=2136)

xgb_clf.fit(X_train, y_train, early_stopping_rounds=200, eval_metric='auc', 
            eval_set=[(X_train, y_train), (X_test, y_test)])

xgb_roc_score = roc_auc_score(y_test, xgb_clf.predict_proba(X_test)[:, 1])
print('ROC AUC: {0:.4f}'.format(xgb_roc_score))

xgb_clf = XGBClassifier(n_estimators=200, random_state=2209, learning_rate=0.02, max_depth=5, 
                        min_child_weight=1, colsample_bytree=0.75, reg_alpha=0.03)

xgb_clf.fit(X_train, y_train, early_stopping_rounds=200, 
            eval_metric="auc",eval_set=[(X_train, y_train), (X_test, y_test)])

xgb_roc_score = roc_auc_score(y_test, xgb_clf.predict_proba(X_test)[:,1],average='macro')
print('ROC AUC: {0:.4f}'.format(xgb_roc_score))

# Commented out IPython magic to ensure Python compatibility.
from xgboost import plot_importance
import matplotlib.pyplot as plt
# %matplotlib inline

fig, ax = plt.subplots(1,1,figsize=(10,10))
plot_importance(xgb_clf, ax=ax , max_num_features=20,height=0.4)

from lightgbm import LGBMClassifier

lgbm_clf = LGBMClassifier(n_estimators=500)

evals = [(X_test, y_test)]
lgbm_clf.fit(X_train, y_train, early_stopping_rounds=500, eval_metric="auc", eval_set=evals, verbose=True)

lgbm_roc_score = roc_auc_score(y_test, lgbm_clf.predict_proba(X_test)[:,1], average='macro')
print('ROC AUC: {0:.4f}'.format(lgbm_roc_score))

